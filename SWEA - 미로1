package com.core.hello;

import java.awt.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Main{
    static int[][] arr;
    static int[][] dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
    static boolean[][] visit;
    static Queue<Point> queue = new LinkedList<>();
    static int count = 0;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        for(int test_case = 1; test_case <= 10; test_case++){
            int a = scan.nextInt();
            arr = new int[16][16];
            visit = new boolean[16][16];
            queue = new LinkedList<>();
            count = 0;
            for(int i = 0; i < 16; i++){
                String str = scan.next();
                for(int j = 0; j < 16; j++){
                    arr[i][j] = str.charAt(j) - '0';
                    if(arr[i][j] == 2){
                        queue.offer(new Point(i,j));
                        visit[i][j] = true;
                    }
                }
            }
            bfs();
            System.out.println("#" + a + " " + count);
        }
    }
    static void bfs(){
        while (!queue.isEmpty()) {
            Point now = queue.poll();
            if(arr[now.x][now.y] == 3){
                count = 1;
                break;
            }
            for(int i = 0; i < 4; i++){
                int nx = now.x + dir[i][0];
                int ny = now.y + dir[i][1];
                if(nx < 0 || ny < 0 || nx >= 16 || ny >= 16)
                    continue;
                if(visit[nx][ny])
                    continue;
                if(arr[nx][ny] == 1)
                    continue;
                visit[nx][ny] = true;
                queue.offer(new Point(nx,ny));
            }
        }
    }
}
