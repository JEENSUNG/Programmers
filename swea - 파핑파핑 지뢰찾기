package com.core.hello;

import java.awt.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Main{
    static int n;
    static int[][] arr;
    static int[][] ans;
    static int count = 0;
    static int[][] dir = {{-1, 0}, {-1, 1}, {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}};
    static Queue<Point> queue;
    static Queue<Point> q;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int test = scan.nextInt();
        for(int t = 1; t <= test; t++){
            n = scan.nextInt();
            arr = new int[n][n];
            ans = new int[n][n];
            queue = new LinkedList<>();
            count = 0;
            for(int i = 0; i < n; i++){
                String str = scan.next();
                for(int j = 0; j < n; j++){
                    if(str.charAt(j) == '*')
                        arr[i][j] = -2;
                    else
                        arr[i][j] = 0;
                }
            }
            count();
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(ans[i][j] == 0 && arr[i][j] == 0){
                        bfs(i, j);
                        count++;
                    }
                }
            }
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(ans[i][j] > 0 && arr[i][j] == 0)
                        count++;
                }
            }
            System.out.println("#" + t + " " + count);
        }
    }
    static void count(){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(arr[i][j] == 0){
                    int cnt = 0;
                    for(int k = 0; k < 8; k++){
                        int nx = i + dir[k][0];
                        int ny = j + dir[k][1];
                        if(nx < 0 || ny < 0 || nx >= n || ny >= n)
                            continue;
                        if(arr[nx][ny] == 0)
                            continue;
                        cnt++;
                    }
                    ans[i][j] = cnt;
                }
            }
        }
    }
    static void bfs(int x, int y){
        queue = new LinkedList<>();
        queue.offer(new Point(x, y));
        ans[x][y] = -1;
        while (!queue.isEmpty()) {
            Point now = queue.poll();
            for(int i = 0; i < 8; i++){
                int nx = now.x + dir[i][0];
                int ny = now.y + dir[i][1];
                if(nx < 0 || ny < 0 || nx >= n || ny >= n)
                    continue;
                if(ans[nx][ny] == -1 || arr[nx][ny] == -2)
                    continue;
                if(ans[nx][ny] == 0)
                    queue.offer(new Point(nx, ny));
                ans[nx][ny] = -1;
            }
        }
    }
}
